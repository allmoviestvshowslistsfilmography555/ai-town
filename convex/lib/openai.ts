// Lifted from openai's package
export interface Message {
  /**
   * The contents of the message. `content` is required for all messages, and may be
   * null for assistant messages with function calls.
   */
  content: string | null;

  /**
   * The role of the messages author. One of `system`, `user`, `assistant`, or
   * `function`.
   */
  role: 'system' | 'user' | 'assistant' | 'function';

  /**
   * The name of the author of this message. `name` is required if role is
   * `function`, and it should be the name of the function whose response is in the
   * `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of
   * 64 characters.
   */
  name?: string;
}

interface ReturnMessage extends Message {
  /**
   * The name and arguments of a function that should be called, as generated by the
   * model.
   */
  function_call?: {
    /**
     * The arguments to call the function with, as generated by the model in JSON
     * format. Note that the model does not always generate valid JSON, and may
     * hallucinate parameters not defined by your function schema. Validate the
     * arguments in your code before calling your function.
     */
    arguments: string;

    /**
     * The name of the function to call.
     */
    name: string;
  };
}

interface ChatCompletion {
  id: string;

  choices: {
    finish_reason?: 'stop' | 'length' | 'function_call';

    index?: number;

    message?: ReturnMessage;
  }[];

  created: number;

  model: string;

  object: string;

  usage?: {
    completion_tokens: number;

    prompt_tokens: number;

    total_tokens: number;
  };
}

export async function chatGPTCompletion(body: Message[]) {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error(
      'Missing OPENAI_API_KEY in environment variables.\n' +
        'Set it in the project settings in the Convex dashboard:\n' +
        '    npx convex dashboard\n or https://dashboard.convex.dev',
    );
  }
  const start = Date.now();
  const result = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: 'Bearer ' + process.env.OPENAI_API_KEY,
    },

    body: JSON.stringify({
      model: 'gpt-3.5-turbo-16k',
      stream: false, // TODO: add streaming implementation
      // function_call: "none" | "auto" | {"name": "my_function"}
      // frequency_penalty: -2 to 2;
      // functions: [{name: "my_function", parameters: {json schema}, description: "my function description"}]
      // logit_bias: {[tokenId]: -100 to 100}
      // max_tokens: number
      // n: how many choices to generate
      // presence_penalty: -2 to 2
      // stop: string[] | string, specifies tokens to stop at
      // temperature 0 to 2, how random
      // top_p: number, alternative to temp
      // user: string, string identifying user to help OpenAI monitor abuse.
      body,
    }),
  });
  const completionMs = Date.now() - start;
  const completion = (await result.json()).data as ChatCompletion;
  return {
    body: completion.choices[0].message?.content,
    usage: completion.usage,
    completionMs,
  };
}

export async function fetchEmbeddingBatch(texts: string[]) {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error(
      'Missing OPENAI_API_KEY in environment variables.\n' +
        'Set it in the project settings in the Convex dashboard:\n' +
        '    npx convex dashboard\n or https://dashboard.convex.dev',
    );
  }
  const start = Date.now();
  const result = await fetch('https://api.openai.com/v1/embeddings', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: 'Bearer ' + process.env.OPENAI_API_KEY,
    },

    body: JSON.stringify({
      model: 'text-embedding-ada-002',
      input: texts.map((text) => text.replace(/\n/g, ' ')),
    }),
  });
  const embeddingMs = Date.now() - start;

  const jsonresults = await result.json();
  if (jsonresults.data.length !== texts.length) {
    console.error(result);
    throw new Error('Unexpected number of embeddings');
  }
  const allembeddings = jsonresults.data as {
    embedding: number[];
    index: number;
  }[];
  allembeddings.sort((a, b) => b.index - a.index);
  return {
    embeddings: allembeddings.map(({ embedding }) => embedding),
    totalTokens: jsonresults.usage.total_tokens,
    embeddingMs,
  };
}

export async function fetchEmbedding(text: string) {
  const { embeddings, ...stats } = await fetchEmbeddingBatch([text]);
  return { embedding: embeddings[0], ...stats };
}
